#import "SESIDCameraManager.h"

@interface SESIDCameraManager()

@property (nonatomic) AVCaptureDevice *captureDevice;
@property (nonatomic) AVCaptureDeviceInput *captureDeviceInput;
@property (nonatomic) AVCaptureVideoDataOutput *captureVideoDataOutput;

@property (nonatomic) AVCaptureSession *captureSession;

@end

@implementation SESIDCameraManager

- (id) init {
  if (self = [super init]) {
    [self initVideoCapture];
  }
  return self;
}

- (void) initVideoCapture {
  // capture device
  self.captureDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];

  // setting continuous auto focus
  if ([self.captureDevice lockForConfiguration:nil]) {
    if ([self.captureDevice isFocusModeSupported:AVCaptureFocusModeContinuousAutoFocus]) {
      self.captureDevice.focusMode = AVCaptureFocusModeContinuousAutoFocus;
    }
    [self.captureDevice unlockForConfiguration];
  }
  
  // capture video data output
  self.captureVideoDataOutput = [[AVCaptureVideoDataOutput alloc] init];
  self.captureVideoDataOutput.videoSettings = @{(NSString*)kCVPixelBufferPixelFormatTypeKey:
                                                  @(kCVPixelFormatType_32BGRA)};
  self.captureVideoDataOutput.alwaysDiscardsLateVideoFrames = YES;
  
  // capture device input
  self.captureDeviceInput = [AVCaptureDeviceInput deviceInputWithDevice:self.captureDevice
                                                                  error:nil];
  
  // capture session
  self.captureSession = [[AVCaptureSession alloc] init];
  self.captureSession.sessionPreset = AVCaptureSessionPreset1280x720;
  
  if([self.captureSession canAddInput:self.captureDeviceInput]) {
    [self.captureSession addInput:self.captureDeviceInput];
  }
  
  [self.captureSession addOutput:self.captureVideoDataOutput];
}

- (void) startCaptureSession {
  [self.captureSession startRunning];
}

- (void) stopCaptureSession {
  [self.captureSession stopRunning];
}

- (AVCaptureVideoPreviewLayer *) addPreviewLayerToView:(UIView *)view
                                           orientation:(AVCaptureVideoOrientation)orientation {
  CALayer *viewLayer = view.layer;
  
  AVCaptureVideoPreviewLayer *captureVideoPreviewLayer = [AVCaptureVideoPreviewLayer
                                                          layerWithSession:self.captureSession];
  
  captureVideoPreviewLayer.frame = viewLayer.bounds;
  captureVideoPreviewLayer.videoGravity = AVLayerVideoGravityResizeAspect;
  captureVideoPreviewLayer.position = CGPointMake(CGRectGetMidX(viewLayer.bounds),
                                                  CGRectGetMidY(viewLayer.bounds));
  captureVideoPreviewLayer.connection.videoOrientation = orientation;
  
  [viewLayer insertSublayer:captureVideoPreviewLayer atIndex:0];
  
  return captureVideoPreviewLayer;
}

- (void) setSampleBufferDelegate:(id<AVCaptureVideoDataOutputSampleBufferDelegate>)delegate {
  dispatch_queue_t videoQueue = dispatch_queue_create("biz.smartengines.video-queue", 0);
  [self.captureVideoDataOutput setSampleBufferDelegate:delegate
                                                 queue:videoQueue];
}

- (CGSize) videoSize {
  return CGSizeMake(1280, 720);
}

@end